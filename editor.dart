// Auto-generated from editor.html.
// DO NOT EDIT.

library editor_html;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'dart:html';
import 'package:web_ui/web_ui.dart';
import 'package:markdown/markdown.dart';


// Original code


String content =
'''
# Dart Markdown

A standalone version of the [dartdoc markdown library][dartdoc].

Features
--------

1. Converts markdown to HTML
2. Syntax highlighting for Dart, HTML and CSS

Highlighting
------------

Currently only HTML highlighting is supported in the client, due to some 
dart:io dependencies in analyzer_experimental and csslib. 

```html
<html>
  <head>
    <style type="text/css">
      html { font-family: sans-serif; }
      pre { background-color: #fafafa; }
    </style>
  </head>
  <body>
    <div>Hello counter: {{count}}</div>
    <script type="application/dart">
      import 'dart:html';
      import 'package:web_ui/watcher.dart' as watchers;
      
      int count;
      main() {
        count = 0;
        window.setInterval(() {
          count++;
          watchers.dispatch();
        }, 1000);
      }
    </script>
  </body>
</html>
```

[dartdoc]: http://code.google.com/p/dart/source/browse/trunk/dart/sdk/lib/_internal/dartdoc/lib/markdown.dart
''';

SafeHtml get output {
  var str = '<div>${markdownToHtml(content)}</div>';
  return new SafeHtml.unsafe(str);
}

void main() {
  //useShadowDom = true; // to enable use of experimental Shadow DOM in the browser  
}

// Additional generated code
void init_autogenerated() {
  var _root = autogenerated.document.body;
  var __container, __editor, __output;
  var __t = new autogenerated.Template(_root);
  __container = _root.query('#container');
  __editor = __container.query('#editor');
  __t.listen(__editor.onInput, ($event) { content = __editor.value; });
  __t.oneWayBind(() => content, (e) { __editor.value = e; }, false, false);
  __output = __container.query('#output');
  var __binding0 = __t.contentBind(() => output, false);
  __output.nodes.add(__binding0);
  __t.create();
  __t.insert();
}

//@ sourceMappingURL=editor.dart.map